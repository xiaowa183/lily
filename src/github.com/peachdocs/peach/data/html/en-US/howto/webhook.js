document.write("<h1>Sync with Webhook</h1>\n\n<p>Obviously, you don&rsquo;t want to login to your server and update documentation manully every time you make a change, especially when change is very small.</p>\n\n<p>Peach provides ability to sync your documentation at real-time through webhook.</p>\n\n<p>So the first thing you need to do is <a href=\"documentation\">setting up your documentation</a> as a <a href=\"documentation#git-repository\">Git repository</a>.</p>\n\n<p>You can then set the webhook secret in your <code>custom/app.ini</code>:</p>\n<pre><code class=\"language-ini\">[docs]\nSECRET = mysecret\n</code></pre>\n\n<p>The format and URL path for trigger a hook is <code>POST /hook?secret={secret}</code>, you can see <code>secret</code> is pass by URL query.</p>\n\n<p>Note that the <code>secret</code> is only valid when URL query and <code>SECRET</code> are matched <strong>exactly</strong>, so if <code>SECRET</code> is empty, URL query of secret must be empty, vice versa.</p>\n\n<h2>GitHub</h2>\n\n<p>Here is an example of how to setup Peach webhook on GitHub, but elsewhere is almost same.</p>\n\n<ol>\n<li>Go to your documentation repository new webhook page (<code>/:username/:reponame/settings/hooks/new</code>)</li>\n<li>Fill in <strong>Payload URL</strong> with hook URL path, for example, <code>http://peachdocs.org/hook?secret=mypeach</code>.</li>\n<li>Click <code>Add webhook</code>, and you&rsquo;re all set. :tada:</li>\n</ol>\n\n<p><img src=\"/docs/images/github_webhook.png\" alt=\"\" /></p>\n\n<p>Now every time you push or merge Pull Request on GitHub, your Peach instance will automatically update documentation to the latest version.</p>\n")