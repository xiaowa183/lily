document.write("<h1>创建文档仓库</h1>\n\n<p>每一个 Peach 文档仓库都包含两部分内容：</p>\n\n<ul>\n<li>TOC.ini</li>\n<li>针对每个语言的文档</li>\n</ul>\n\n<p>仓库结构大致如下：</p>\n<pre><code class=\"language-sh\">$ tree\n.\n├── TOC.ini\n├── en-US\n│   ├── advanced\n│   │   ├── README.md\n│   │   └── ...\n│   ├── faqs\n│   │   └── README.md\n│   ├── howto\n│   │   ├── README.md\n│   │   ├── ...\n│   └── intro\n│       ├── README.md\n│       ├── ...\n└── zh-CN\n│   ├── ...\n</code></pre>\n\n<p>让我娓娓道来它们都是做什么的。:trollface:</p>\n\n<h2>TOC.ini</h2>\n\n<p>在仓库的根目录，您必须创建一个名为 <code>TOC.ini</code> 的文件，也就是所谓的 <strong>Table Of Content</strong>。</p>\n\n<p>在这个文件中，您需要使用 <a href=\"https://en.wikipedia.org/wiki/INI_file\">INI</a> 语法来定义显示哪些目录和文件，以及它们的显示顺序。</p>\n\n<p>下面为 <a href=\"http://peachdocs.org\">Peach 文档</a> 的 <code>TOC.ini</code> 文件：</p>\n<pre><code class=\"language-ini\">-: intro\n-: howto\n-: advanced\n-: faqs\n\n[intro]\n-: README\n-: installation\n-: getting_started\n-: roadmap\n\n[howto]\n-: README\n-: documentation\n-: webhook\n-: templates\n-: static_resources\n-: disqus\n-: ga\n\n[advanced]\n-: README\n-: config_cheat_sheet\n\n[faqs]\n-: README\n</code></pre>\n\n<p>:speech_balloon: 您可能已经注意到，Peach 只支持一层目录结构。</p>\n\n<p>在默认分区中，您可以定义显示哪些目录以及它们的显示顺序：</p>\n<pre><code class=\"language-ini\">-: intro\n-: howto\n-: advanced\n-: faqs\n</code></pre>\n\n<p>这些名称必须和目录名称一致。</p>\n\n<p>然后再为每一个目录创建一个分区，顺序在这里是无所谓的：</p>\n<pre><code class=\"language-ini\">[intro]\n...\n[howto]\n...\n[advanced]\n...\n[faqs]\n...\n</code></pre>\n\n<p>在每个分区中，您可以定义显示哪些文件以及它们的显示顺序：</p>\n<pre><code class=\"language-ini\">[intro]\n-: README\n-: installation\n-: getting_started\n-: roadmap\n</code></pre>\n\n<p>因为文件已经默认使用 Markdown 语法，并且必须以 <code>.md</code> 作为扩展名，所以您完全不需要在 <code>TOC.ini</code> 文件中说明。</p>\n\n<p>:exclamation: :exclamation: :exclamation:</p>\n\n<ul>\n<li>每个分区必须至少包含一个键</li>\n<li>每个分区的第一个键用于指示该目录的信息</li>\n<li>这个文件本身不会作为文档单独显示，但是会以目录的形式显示。例如：<a href=\"../intro\">简介</a></li>\n<li>该键的名称是随意的，但一般约定使用 <code>README</code>，即使用 <code>README.md</code> 作为文件名</li>\n</ul>\n\n<h2>本地化</h2>\n\n<p>在仓库的根目录，您需要为每个支持的语言创建一个名称符合 <a href=\"https://msdn.microsoft.com/en-us/library/ee825488(v=cs.20).aspx\">Language Culture Name</a> 的相应目录。</p>\n\n<p>Peach 已经默认支持英语（<code>en-US</code>）和简体中文（<code>zh-CN</code>），所以 Peach 文档的目录结构为：</p>\n<pre><code class=\"language-sh\">$ tree\n.\n├── en-US\n│   ├── ...\n└── zh-CN\n│   ├── ...\n</code></pre>\n\n<p>当然，这两个目录拥有完全相同的目录结构和文件名称。</p>\n\n<h2>文档内容</h2>\n\n<p>每个文件都必须在最开头的部分定义自身的信息，然后才是文档的内容：</p>\n<pre><code>---\nname: 简介\n---\n\n# Peach\n\nPeach 是一款支持多语言、实时同步以及全文搜索功能的 Web 文档服务器。\n...\n</code></pre>\n\n<p>如果您的目录不包含任何文档内容，只是代表分类，则可以省略文档部分：</p>\n<pre><code>---\nname: 高级用法\n---\n</code></pre>\n\n<h2>链接跳转</h2>\n\n<p>Peach 中渲染链接的方式和其它地方大体相同：</p>\n\n<ul>\n<li>链接到相同目录的其它页面：<code>[Webhook](webhook)</code>.</li>\n<li>链接到某个目录：<code>[Introduction](../intro)</code>.</li>\n<li>链接到其它目录下的页面：<code>[Getting Started](../intro/getting_started)</code>.</li>\n</ul>\n\n<h2>链接图片</h2>\n\n<p>默认情况下，所有的文档页面都会使用 <code>/docs</code> 作为 URL 前缀。并且您所有的图片都必须存放于仓库根目录下名为 <code>images</code> 的子目录。</p>\n\n<p>然后通过这种语法来链接图片：<code>![](/docs/images/github_webhook.png)</code></p>\n\n<h2>文档配置</h2>\n\n<p>所有的配置改动都必须发生在 <code>custom/app.ini</code> 文件。</p>\n\n<h3>本地化</h3>\n\n<p>Peach 已经默认支持英语和简体中文，所以如果您的文档正好只支持这两种语言，则不需要进行任何修改。</p>\n\n<p>但是，如果您只书写英语文档，则必须对配置进行重写：</p>\n<pre><code class=\"language-ini\">[i18n]\nLANGS = en-US\nNAMES = English\n</code></pre>\n\n<p>或者您支持两种以上语言：</p>\n<pre><code class=\"language-ini\">[i18n]\nLANGS = en-US,zh-CN,fr-FR\nNAMES = English,简体中文,Français\n</code></pre>\n\n<p>在以上两个例子中，它们的第一个语言都是 <code>en-US</code>，第一个语言又被称之为 <strong>默认语言</strong>，如果某个页面在首选语言中不存在，则会自动显示默认语言的版本。</p>\n\n<h3>Git 仓库</h3>\n\n<p>在部署环境下，一般建议使用远程 Git 源来作为您的文档仓库：</p>\n<pre><code class=\"language-ini\">RUN_MODE = prod\n\n[docs]\nTYPE = remote\nTARGET = https://github.com/Unknwon/peach-docs.git\n</code></pre>\n\n<p>如此一来，Peach 就知道去哪里拉取和更新文档，并对文档进行缓存。</p>\n\n<h2>本地开发</h2>\n\n<p>很显然，您会有本地书写开发文档的需求，因此 Peach 也支持将文档同步类型设置为本地：</p>\n<pre><code class=\"language-ini\">RUN_MODE = dev\n\n[docs]\nTYPE = local\nTARGET = ~unknwon/mydocs\n</code></pre>\n\n<p>在 <code>dev</code> 模式下，Peach 会在每次访问文档页面时重新加载并渲染相应的文档，从而也就达到实时预览效果的需求。</p>\n")